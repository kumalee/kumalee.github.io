<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Yo, Kuma!]]></title>
  <subtitle><![CDATA[Life is short, be positive.]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://kumalee.github.io//"/>
  <updated>2015-07-18T14:25:18.000Z</updated>
  <id>http://kumalee.github.io//</id>
  
  <author>
    <name><![CDATA[Kuma Lee]]></name>
    <email><![CDATA[li.jun.kuma@gmail.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Algorithm in Javascript]]></title>
    <link href="http://kumalee.github.io/2015/07/18/Algorithm-in-Javascript/"/>
    <id>http://kumalee.github.io/2015/07/18/Algorithm-in-Javascript/</id>
    <published>2015-07-18T13:33:53.000Z</published>
    <updated>2015-07-18T14:25:18.000Z</updated>
    <content type="html"><![CDATA[<p>Popular sorting algorithms 流行的排序算法</p>
<ol>
<li>Simple sorts 简单排序<ol>
<li>Insertion sort 插入排序法</li>
<li>Selection sort 选择排序法</li>
</ol>
</li>
<li>Efficient sorts 效率排序<ol>
<li>Merge sort 归并排序法</li>
<li>Heap sort 堆排序法</li>
<li>Quick sort 快速排序法</li>
</ol>
</li>
<li>Bubble sort and variants 冒泡和变量排序<ol>
<li>Bubble sort 冒泡排序法</li>
<li>Shell sort 希尔排序法</li>
<li>Comb sort 梳子排序法</li>
</ol>
</li>
<li>Distribution sort 分布排序<ol>
<li>Counting sort 计数排序法</li>
<li>Bucket sort 桶排序法</li>
<li>Radix sort 基数排序法</li>
</ol>
</li>
</ol>
<p><a href="http://jsdo.it/norahiko/oxIy/fullscreen" target="_blank" rel="external">Sort Animation in Javascript by NoraHiko</a></p>
<h2 id="Quick_Sort_(sometimes_called_partition-exchange_sort)">Quick Sort (sometimes called partition-exchange sort)</h2><p>by Charles Antony Richard Hoare (commonly known as Tony Hoare or C. A. R. Hoare)（1934—）developed in 1959/1960.<br>ACM Turing Award (1980).</p>
<ol>
<li>Pick an element, called a pivot, from the array.<br>选择一个基准</li>
<li>Reorder the array so that all elements with values less than the pivot come  before the pivot, while all elements with values greater than the pivot come after it (equal values can go either way). After this partitioning, the pivot is in its final position. This is called the partition operation.<br>所有小于基准的元素，移到基准的左边;所有大于基准的元素，移到基准的右边。</li>
<li>Recursively apply the above steps to the sub-array of elements with smaller values and separately to the sub-array of elements with greater values.<br>对基准左边和右边的两个子集，递归第一步和第二步，直到所有子集只剩下一个元素为止。</li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">quickSort</span> = function(arr) &#123;</span><br><span class="line">　　<span class="keyword">if</span> (arr.length &lt;= <span class="number">1</span>) &#123; <span class="keyword">return</span> arr; &#125;</span><br><span class="line">　　<span class="keyword">var</span> pivotIndex = <span class="type">Math</span>.floor(arr.length / <span class="number">2</span>);</span><br><span class="line">　　<span class="keyword">var</span> pivot = arr.splice(pivotIndex, <span class="number">1</span>)[<span class="number">0</span>];</span><br><span class="line">　　<span class="keyword">var</span> <span class="keyword">left</span> = [];</span><br><span class="line">　　<span class="keyword">var</span> <span class="keyword">right</span> = [];</span><br><span class="line">　　<span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++)&#123;</span><br><span class="line">　　　　<span class="keyword">if</span> (arr[i] &lt; pivot) &#123;</span><br><span class="line">　　　　　　<span class="keyword">left</span>.push(arr[i]);</span><br><span class="line">　　　　&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">　　　　　　<span class="keyword">right</span>.push(arr[i]);</span><br><span class="line">　　　　&#125;</span><br><span class="line">　　&#125;</span><br><span class="line">　　<span class="keyword">return</span> <span class="built_in">quickSort</span>(<span class="keyword">left</span>).concat([pivot], <span class="built_in">quickSort</span>(<span class="keyword">right</span>));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="References">References</h3><p><a href="https://en.wikipedia.org/wiki/Sorting_algorithm" target="_blank" rel="external">Algorithm https://en.wikipedia.org/wiki/Sorting_algorithm</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Popular sorting algorithms 流行的排序算法</p>
<ol>
<li>Simple sorts 简单排序<ol>
<li>Insertion sort 插入排序法</li>
<li>Selection sort 选择排序法</li>
</ol>
<]]>
    </summary>
    
      <category term="algorithm" scheme="http://kumalee.github.io/tags/algorithm/"/>
    
      <category term="develop" scheme="http://kumalee.github.io/tags/develop/"/>
    
      <category term="javascript" scheme="http://kumalee.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Gossip Renaissance]]></title>
    <link href="http://kumalee.github.io/2015/07/18/Gossip-Renaissance/"/>
    <id>http://kumalee.github.io/2015/07/18/Gossip-Renaissance/</id>
    <published>2015-07-18T06:49:30.000Z</published>
    <updated>2015-07-18T14:23:21.000Z</updated>
    <content type="html"><![CDATA[<p>I bought 《重返文艺复兴－你不知道的天才之争》 two month ago.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>I bought 《重返文艺复兴－你不知道的天才之争》 two month ago.</p>
]]>
    </summary>
    
      <category term="art" scheme="http://kumalee.github.io/tags/art/"/>
    
      <category term="read" scheme="http://kumalee.github.io/tags/read/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Node Scaffolds]]></title>
    <link href="http://kumalee.github.io/2015/07/18/Node-Scaffolds/"/>
    <id>http://kumalee.github.io/2015/07/18/Node-Scaffolds/</id>
    <published>2015-07-18T06:44:18.000Z</published>
    <updated>2015-07-18T14:23:43.000Z</updated>
    <content type="html"><![CDATA[<p>Based on gulp</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Based on gulp</p>
]]>
    </summary>
    
      <category term="develop" scheme="http://kumalee.github.io/tags/develop/"/>
    
      <category term="node" scheme="http://kumalee.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS Animation]]></title>
    <link href="http://kumalee.github.io/2015/07/18/CSS-Animation/"/>
    <id>http://kumalee.github.io/2015/07/18/CSS-Animation/</id>
    <published>2015-07-18T06:41:38.000Z</published>
    <updated>2015-07-18T13:25:46.000Z</updated>
    <content type="html"><![CDATA[<p>This article is the collection about animation for html.<br>关于 html 动画的一切在这里集结</p>
<p>浏览器处理的过程:</p>
<blockquote>
<p><strong>Recalculate Style</strong> -&gt; <strong>Layout</strong> -&gt; <strong>Paint Setup and Paint</strong> -&gt; <strong>Composite Layers</strong><br>计算元素的样式（重新计算样式）-&gt; 生成每个元素的几何形状和位置（布局）-&gt; 绘制图层中的每个像素（初始化绘图并且进行绘图）-&gt; 并且将图层绘制到屏幕上（图层的合成）。</p>
</blockquote>
<p>通过DevTools从文档对象模型到像素级别的观察:</p>
<blockquote>
<p>The higher up you start on the timeline waterfall the more work the browser has to do to get pixels on to the screen. Chrome DevTools 框架模式。 瀑布流越高，说明浏览器做的越多。</p>
</blockquote>
<p>Browsers can animate four things cheaply</p>
<ol>
<li>position -&gt; transform: translate(npx, npx);</li>
<li>scale -&gt; transform: scale(n);</li>
<li>rotation -&gt; transform: rotate(ndeg);</li>
<li>opacity -&gt; opcaity: 0…1;</li>
</ol>
<p>Chrome, Firefox, Safari and Opera all hardware accelerate transforms and opacity.</p>
<p>合成属性的动画</p>
<p>有一个 CSS 属性，你可能认为它会引起重绘，但有时候并不会。就是：opacity. 当 GPU 在合成元素的纹理结构的时候，会以一个较低的 alpha 值去处理 opacity 的改变。它的条件是，元素必须是图层中唯一的一个元素。如果它和其它的元素组合在一起，那么对 opacity 的改变也会让 GPU（错误地）淡化其它的元素。</p>
<p>在 Blink 和 WebKit 内核的浏览器中，对于在 CSS 的 transition 或者 animation 中有 opacity 的改变的元素，将会为其创建一个图层。但也有很多开发者使用 translateZ(0) 或者 translate3d(0,0,0) 来人为地强制性地创建一个图层。 强制创建一个图层可以确保图层被绘制完毕并且可以在动画开始的时候，马上进入就绪状态。（创建并且绘制一个图层是一个不会有人反对的操作，并且它会延迟你的动画的开始），而且由于反锯齿的改变，动画中将不会出现唐突的变化。然而，需要有节制地增加图层；如果过分的增加图层，那么将会导致闪烁。</p>
<p>Three ways that we can make animation for html</p>
<ol>
<li>css animation</li>
<li>css transition</li>
<li>javascript requireAnimationFrame</li>
</ol>
<p>Developers often have to decide if they will animate with JavaScript (imperative 命令式) or CSS (declarative 声明式). There are pros and cons to each, so let’s take a look:</p>
<p>命令式</p>
<p>命令式动画主要的优点同时也是它主要的缺点的是：它在浏览器主进程的 JavaScript 中运行。主进程已经忙于运行其他的 JavaScript，样式的计算，布局还有绘制。所以进程内存在这资源竞争。这实质上增加了掉帧的风险，可能这一帧是你认为最重要的帧。</p>
<p>JavaScript 中的动画可以为你提供更多的控制：开始，暂停，回放，中断和取消等细节。有一些特效如 parallax 的滚动只能用 JavaScript 来完成。</p>
<p>声明式</p>
<p>作为替代的方案，你可以用 CSS 来实现你的渐变和动画。最主要的好处就是，浏览器会对动画进行优化。如果有需要，它会创建图层。并且可以在主进程之外完成一些操作。它最主要的缺点就是 CSS 动画相对于 Javascript 动画而言，缺乏表现力。并且很难有意义地组织动画，这意味着创造动画会带来较高的复杂度和错误率。</p>
<p>使用 Chrome 的 DevTools 调试&amp;优化：<br>Timeline 调试</p>
<ol>
<li>查看每帧的时间</li>
<li>查看内存 Memory</li>
<li>查看 CompositeLayer</li>
</ol>
<p>优化方法<br>CSS</p>
<ol>
<li>在做每个动画时，要确保每次改变CSS时，所影响的元素都是我们需要改变的，不要改变和动画无关的元素。</li>
<li><p>避免Layout Thrashing</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">for</span> (var i = <span class="number">0</span><span class="comment">; i &lt; elements.length; i++) &#123;</span></span><br><span class="line">  var <span class="keyword">blockWidth </span>= <span class="keyword">baseElement.offsetWidth;</span><br><span class="line"></span>  elements[i].style.width = <span class="keyword">blockWidth;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
<p>这是一个性能很低的例子。<br>这个例子修改起来非常简单，只要把读Layout的事情放在循环外就好了。</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">var</span> <span class="keyword">blockWidth </span>= <span class="keyword">baseElement.offsetWidth;</span><br><span class="line"></span><span class="label">for</span> (var i = <span class="number">0</span><span class="comment">; i &lt; elements.length; i++) &#123;</span></span><br><span class="line">  elements[i].style.width = <span class="keyword">blockWidth;</span><br><span class="line"></span>&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>更快的CSS Matching</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">div</span><span class="class">.box</span>:<span class="function"><span class="title">not</span><span class="params">(:empty)</span></span>:last-of-type <span class="class">.title</span></span><br><span class="line"><span class="class">.box--last</span> &gt; <span class="class">.title-container</span> &gt; <span class="class">.title</span></span><br><span class="line"><span class="class">.box</span>:<span class="function"><span class="title">nth-last-child</span><span class="params">(-n+<span class="number">1</span>)</span></span> .title</span><br></pre></td></tr></table></figure>
<p>第二种写法性能是最好的, 不过好的设计应该是不断回收在屏幕外的 Dom。</p>
</li>
<li><p>把适量的元素变成 layer<br>如何让一个元素成为一个Layer呢？目前有几种Hack的方式：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.layer</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">transfrom</span>:<span class="value"> <span class="function">translate3d</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.layer</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">transfrom</span>:<span class="value"> <span class="function">translateZ</span>(<span class="number">0</span>)</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<p>Chrome提供一个更好的方式，使用will-change，和上面不同，will-change不会直接把元素变成Layer，而是给浏览器一个提示，这可以让浏览器自己决定是否成为Layer，推荐这种方式：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.layer</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">will-change</span>:<span class="value"> transform</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>Javascript</p>
<ol>
<li>查看耗时较长的 Javascript，必要时使用 WebWorker</li>
<li>低优处理 Micro Optimization</li>
</ol>
<p><img src="http://77fhp9.com1.z0.glb.clouddn.com/css%20animate.jpg" alt=""></p>
<table>
<thead>
<tr>
<th>CSS Property</th>
<th>% of webpages</th>
<th>invasiveness</th>
</tr>
</thead>
<tbody>
<tr>
<td>width</td>
<td>93.57%</td>
<td>layout</td>
</tr>
<tr>
<td>height</td>
<td>91.65%</td>
<td>layout</td>
</tr>
<tr>
<td>padding</td>
<td>91.14%</td>
<td>layout</td>
</tr>
<tr>
<td>margin</td>
<td>91.00%</td>
<td>layout</td>
</tr>
<tr>
<td>display</td>
<td>91.00%</td>
<td>layout</td>
</tr>
<tr>
<td>border-width</td>
<td>90.76%</td>
<td>layout</td>
</tr>
<tr>
<td>border</td>
<td>90.28%</td>
<td>layout</td>
</tr>
<tr>
<td>top</td>
<td>89.88%</td>
<td>layout</td>
</tr>
<tr>
<td>position</td>
<td>89.83%</td>
<td>layout</td>
</tr>
<tr>
<td>color</td>
<td>87.46%</td>
<td>paint</td>
</tr>
<tr>
<td>border-style</td>
<td>87.43%</td>
<td>paint</td>
</tr>
<tr>
<td>font-size</td>
<td>87.39%</td>
<td>layout</td>
</tr>
<tr>
<td>float</td>
<td>86.12%</td>
<td>layout</td>
</tr>
<tr>
<td>background-color</td>
<td>86.04%</td>
<td>layout</td>
</tr>
<tr>
<td>border-color</td>
<td>85.90%</td>
<td>layout</td>
</tr>
<tr>
<td>text-align</td>
<td>85.73%</td>
<td>layout</td>
</tr>
<tr>
<td>opacity</td>
<td>85.53%</td>
<td>composite</td>
</tr>
<tr>
<td>overflow-y</td>
<td>84.25%</td>
<td>layout</td>
</tr>
<tr>
<td>font-weight</td>
<td>84.03%</td>
<td>layout</td>
</tr>
<tr>
<td>overflow</td>
<td>83.96%</td>
<td>layout</td>
</tr>
<tr>
<td>left</td>
<td>83.35%</td>
<td>layout</td>
</tr>
<tr>
<td>visibility</td>
<td>82.07%</td>
<td>paint</td>
</tr>
<tr>
<td>font-family</td>
<td>81.98%</td>
<td>layout</td>
</tr>
<tr>
<td>background</td>
<td>81.66%</td>
<td>paint</td>
</tr>
<tr>
<td>text-decoration</td>
<td>80.78%</td>
<td>paint</td>
</tr>
<tr>
<td>margin-bottom</td>
<td>80.52%</td>
<td>layout</td>
</tr>
<tr>
<td>cursor</td>
<td>79.66%</td>
<td>composite</td>
</tr>
<tr>
<td>padding-bottom</td>
<td>79.21%</td>
<td>layout</td>
</tr>
<tr>
<td>line-height</td>
<td>78.58%</td>
<td>layout</td>
</tr>
<tr>
<td>z-index</td>
<td>77.44%</td>
<td>composite</td>
</tr>
<tr>
<td>background-image</td>
<td>77.13%</td>
<td>paint</td>
</tr>
<tr>
<td>vertical-align</td>
<td>75.90%</td>
<td>layout</td>
</tr>
<tr>
<td>right</td>
<td>75.50%</td>
<td>layout</td>
</tr>
<tr>
<td>background-position</td>
<td>73.62%</td>
<td>paint</td>
</tr>
<tr>
<td>background-repeat</td>
<td>72.46%</td>
<td>paint</td>
</tr>
<tr>
<td>clear</td>
<td>71.90%</td>
<td>layout</td>
</tr>
<tr>
<td>white-space</td>
<td>71.69%</td>
<td>layout</td>
</tr>
<tr>
<td>list-style-type</td>
<td>68.41%</td>
<td>layout</td>
</tr>
<tr>
<td>bottom</td>
<td>68.13%</td>
<td>layout</td>
</tr>
<tr>
<td>outline-color</td>
<td>66.49%</td>
<td>paint</td>
</tr>
<tr>
<td>outline</td>
<td>66.42%</td>
<td>paint</td>
</tr>
<tr>
<td>outline-style</td>
<td>66.40%</td>
<td>paint</td>
</tr>
<tr>
<td>zoom</td>
<td>66.25%</td>
<td>layout</td>
</tr>
<tr>
<td>font-style</td>
<td>65.78%</td>
<td>layout</td>
</tr>
<tr>
<td>font</td>
<td>64.69%</td>
<td>layout</td>
</tr>
<tr>
<td>min-height</td>
<td>64.64%</td>
<td>layout</td>
</tr>
<tr>
<td>border-radius</td>
<td>64.23%</td>
<td>paint</td>
</tr>
<tr>
<td>max-width</td>
<td>63.49%</td>
<td>layout</td>
</tr>
<tr>
<td>min-width</td>
<td>63.42%</td>
<td>layout</td>
</tr>
<tr>
<td>webkit-border-radius</td>
<td>63.09%</td>
<td>paint</td>
</tr>
<tr>
<td>webkit-box-shadow</td>
<td>62.69%</td>
<td>paint</td>
</tr>
<tr>
<td>list-style</td>
<td>62.68%</td>
<td>layout</td>
</tr>
<tr>
<td>content</td>
<td>62.34%</td>
<td>layout</td>
</tr>
<tr>
<td>border-collapse</td>
<td>62.17%</td>
<td>layout</td>
</tr>
<tr>
<td>text-shadow</td>
<td>60.41%</td>
<td>layout</td>
</tr>
<tr>
<td>box-sizing</td>
<td>59.54%</td>
<td>layout</td>
</tr>
<tr>
<td>text-indent</td>
<td>57.39%</td>
<td>layout</td>
</tr>
<tr>
<td>outline-width</td>
<td>56.87%</td>
<td>paint</td>
</tr>
<tr>
<td>box-shadow</td>
<td>56.81%</td>
<td>paint</td>
</tr>
<tr>
<td>webkit-border-horizontal-spacing</td>
<td>55.87%</td>
<td>layout</td>
</tr>
<tr>
<td>border-spacing</td>
<td>55.86%</td>
<td>layout</td>
</tr>
<tr>
<td>max-height</td>
<td>55.28%</td>
<td>layout</td>
</tr>
<tr>
<td>text-transform</td>
<td>53.16%</td>
<td>layout</td>
</tr>
<tr>
<td>text-overflow</td>
<td>53.04%</td>
<td>layout</td>
</tr>
<tr>
<td>word-wrap</td>
<td>49.09%</td>
<td>layout</td>
</tr>
<tr>
<td>webkit-user-select</td>
<td>48.65%</td>
<td>composite</td>
</tr>
<tr>
<td>background-size</td>
<td>47.67%</td>
<td>paint</td>
</tr>
<tr>
<td>webkit-transition</td>
<td>47.10%</td>
<td>?</td>
</tr>
<tr>
<td>letter-spacing</td>
<td>47.01%</td>
<td>layout</td>
</tr>
<tr>
<td>webkit-appearance</td>
<td>44.55%</td>
<td>layout</td>
</tr>
<tr>
<td>direction</td>
<td>43.99%</td>
<td>layout</td>
</tr>
<tr>
<td>webkit-transform</td>
<td>42.66%</td>
<td>composite</td>
</tr>
</tbody>
</table>
<h3 id="References">References</h3><p>Source <a href="http://goo.gl/lPVJY6" target="_blank" rel="external">http://goo.gl/lPVJY6</a></p>
<p><a href="https://www.javascripting.com/animation/?sort=rating" target="_blank" rel="external">Amazing Animation Projects</a></p>
<p><a href="http://weibo.com/p/1001603865643593165786" target="_blank" rel="external">H5动画60fps之路</a></p>
<p><a href="http://www.html5rocks.com/en/tutorials/speed/high-performance-animations/" target="_blank" rel="external">High Performance Animations</a></p>
<p><a href="http://www.html5rocks.com/en/tutorials/speed/layers/" target="_blank" rel="external">Accelerated Rendering in Chrome</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This article is the collection about animation for html.<br>关于 html 动画的一切在这里集结</p>
<p>浏览器处理的过程:</p>
<blockquote>
<p><strong>Recalculate S]]>
    </summary>
    
      <category term="css" scheme="http://kumalee.github.io/tags/css/"/>
    
      <category term="develop" scheme="http://kumalee.github.io/tags/develop/"/>
    
  </entry>
  
</feed>